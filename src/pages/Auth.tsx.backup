import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Checkbox } from "@/components/ui/checkbox";
import { useForm } from 'react-hook-form';
import { useAuth } from '@/contexts/AuthContext';
import { useNavigate, useLocation } from 'react-router-dom';
import { ArrowLeft, Building, ShoppingBag, MapPin, Eye, EyeOff } from 'lucide-react';
import { toast } from 'sonner';
import { checkIfBusinessPartner } from '@/services/businessPartnerService';
import Logo from '@/components/Logo';

interface AuthFormData {
  email: string;
  password: string;
  name?: string;
  businessName?: string;
  rememberMe?: boolean;
}

const Auth = () => {
  const [isSignUp, setIsSignUp] = useState(false);
  const [isBusinessAuth, setIsBusinessAuth] = useState(false);
  const [isOpen, setIsOpen] = useState(true);
  const [showTermsConsent, setShowTermsConsent] = useState(false);
  const [showEmailSignup, setShowEmailSignup] = useState(false);
  const [showLocationRequest, setShowLocationRequest] = useState(false);
  const [termsAccepted, setTermsAccepted] = useState(false);
  const [privacyAccepted, setPrivacyAccepted] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [redirecting, setRedirecting] = useState(false);
  const { signIn, signUp, signInWithGoogle, getDashboardRedirectPath } = useAuth();
  const navigate = useNavigate();
  const location = useLocation();
  
  const form = useForm<AuthFormData>({
    defaultValues: {
      email: '',
      password: '',
      name: '',
      businessName: '',
      rememberMe: false
    }
  });

  // Load saved email on component mount
  useEffect(() => {
    const savedEmail = localStorage.getItem('saved_email');
    if (savedEmail) {
      form.setValue('email', savedEmail);
      setRememberMe(true);
    }
  }, [form]);

  // Handle successful authentication with business partner detection
  const handleAuthSuccess = async (email: string) => {
    setRedirecting(true);
    
    try {
      // Fast business partner check with timeout
      const businessCheck = await Promise.race([
        checkIfBusinessPartner(email),
        new Promise(resolve => setTimeout(() => resolve({ isBusinessPartner: false }), 300))
      ]);
      
      if ((businessCheck as any).isBusinessPartner) {
        toast.success(`Welcome ${(businessCheck as any).businessName || 'Business Partner'}! Redirecting...`);
        navigate('/business-dashboard', { replace: true });
        setIsOpen(false);
      } else {
        toast.success('Welcome to FoodVrse!');
        navigate('/discover', { replace: true });
        setIsOpen(false);
      }
    } catch (error) {
      console.error('Error checking business status:', error);
      // Default to discover on error
      toast.success('Welcome to FoodVrse!');
      navigate('/discover', { replace: true });
      setIsOpen(false);
    }
  };

  const onSubmit = async (data: AuthFormData) => {
    setIsLoading(true);
    try {
      // Handle browser password storage
      if (rememberMe && 'credentials' in navigator && (navigator as any).credentials?.store) {
        try {
          // Simple localStorage backup for password saving
          localStorage.setItem('saved_email', data.email);
          if (confirm('Save password to browser?')) {
            const credential = new (window as any).PasswordCredential({
              id: data.email,
              password: data.password,
            });
            await (navigator as any).credentials.store(credential);
          }
        } catch (credError) {
          console.log('Credential storage not supported, using localStorage fallback');
          localStorage.setItem('saved_email', data.email);
        }
      } else if (rememberMe) {
        localStorage.setItem('saved_email', data.email);
      }

      if (isSignUp) {
        // Sign up flow
        const userData = isBusinessAuth 
          ? { display_name: data.businessName, is_business: true }
          : { display_name: data.name };

        const { error } = await signUp(data.email, data.password, userData);
        if (!error) {
          toast.success('Account created! Please check your email to verify your account.');
          // Don't redirect immediately for signup - wait for email verification
          setIsSignUp(false);
        } else {
          // Handle rate limiting error specifically
          if (error.message && error.message.includes('43 seconds')) {
            toast.error('Too many attempts. Please wait a moment before trying again, or try signing in instead.');
          }
        }
      } else {
        // Sign in flow
        const { error } = await signIn(data.email, data.password);
        if (!error) {
          await handleAuthSuccess(data.email);
        } else {
          toast.error(error.message || 'Sign in failed');
        }
      }
    } catch (error) {
      console.error('Authentication error:', error);
      // Check if it's a rate limiting error
      if (error && typeof error === 'object' && 'message' in error && 
          typeof error.message === 'string' && error.message.includes('43 seconds')) {
        toast.error('Rate limit reached. Please wait a moment before trying again.');
      } else {
        toast.error('Authentication failed. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    if (!isBusinessAuth && isSignUp) {
      setShowTermsConsent(true);
      return;
    }
    
    setIsLoading(true);
    try {
      const { error } = await signInWithGoogle(isBusinessAuth);
      if (!error) {
        // The OAuth flow will handle the redirect
        // We don't need to navigate here as the user will be redirected to Google
      }
    } catch (error) {
      console.error('Google sign-in error:', error);
      toast.error('Google sign-in failed. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleFacebookSignIn = () => {
    if (!isBusinessAuth && isSignUp) {
      setShowTermsConsent(true);
    } else {
      toast.success('Facebook Sign-In coming soon!');
    }
  };

  const handleTermsConsent = async () => {
    if (termsAccepted && privacyAccepted) {
      setShowTermsConsent(false);
      
      // If this was triggered by Google sign-in, proceed with Google OAuth
      if (!isBusinessAuth && isSignUp) {
        setIsLoading(true);
        try {
          const { error } = await signInWithGoogle(false);
          if (!error) {
            // The OAuth flow will handle the redirect
          }
        } catch (error) {
          console.error('Google sign-in error:', error);
          toast.error('Google sign-in failed. Please try again.');
        } finally {
          setIsLoading(false);
        }
      } else {
        toast.success('Terms accepted! Please complete your signup.');
      }
    } else {
      toast.error('Please accept both terms and privacy policy to continue.');
    }
  };

  const handleEmailSignupContinue = (subscribeToEmails: boolean) => {
    if (subscribeToEmails) {
      console.log('User subscribed to emails');
    }
    setShowEmailSignup(false);
    
    // Check if location request was recently shown
    const lastShown = localStorage.getItem('auth_location_request_last_shown');
    if (lastShown) {
      const now = Date.now();
      const timeSinceLastShown = now - parseInt(lastShown);
      const cooldownPeriod = 7 * 24 * 60 * 60 * 1000; // 7 days
      
      if (timeSinceLastShown < cooldownPeriod) {
        // Skip location request and go directly to home
        navigate('/');
        return;
      }
    }
    
    setShowLocationRequest(true);
  };

  const handleLocationRequest = (allowLocation: boolean) => {
    if (allowLocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('Location accessed:', position.coords);
          // Only show success toast if enough time has passed since last shown
          const lastShown = localStorage.getItem('auth_location_toast_last_shown');
          const now = Date.now();
          const cooldownPeriod = 24 * 60 * 60 * 1000; // 24 hours
          
          if (!lastShown || (now - parseInt(lastShown)) > cooldownPeriod) {
            toast.success('Location access granted!');
            localStorage.setItem('auth_location_toast_last_shown', now.toString());
          }
        },
        (error) => {
          console.log('Location access denied:', error);
          toast.info('Location access was denied, but you can still use the app.');
        }
      );
    }
    setShowLocationRequest(false);
    // Remember when user interacted with location request
    localStorage.setItem('auth_location_request_last_shown', Date.now().toString());
    // Always redirect to home page after signup flow
    navigate('/');
  };

  const handleClose = () => {
    setIsOpen(false);
    navigate('/');
  };

  const resetForm = () => {
    form.reset();
    setIsSignUp(false);
  };

  const handleAuthTypeSwitch = (toBusiness: boolean) => {
    setIsBusinessAuth(toBusiness);
    resetForm();
  };

  const handleBecomePartner = () => {
    navigate('/partner-application');
  };

  if (redirecting) {
    return (
      <Dialog open={isOpen} onOpenChange={handleClose}>
        <DialogContent className="sm:max-w-md bg-gradient-to-br from-[#1a1a2e] to-[#16213e] border-none text-white">
          <div className="text-center py-8">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
            <h2 className="text-xl font-semibold mb-2">Setting up your dashboard...</h2>
            <p className="text-gray-300">Please wait while we redirect you...</p>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md bg-gradient-to-br from-[#1a1a2e] to-[#16213e] border-none text-white">
        <DialogHeader>
          <div className="text-center mb-6">
            <div className="mx-auto mb-4 flex items-center justify-center">
              <Logo size="lg" className="w-16 h-16" />
            </div>
            <DialogTitle className="text-2xl font-bold text-white mb-2">
              Welcome to FoodVrse
            </DialogTitle>
            <DialogDescription className="text-gray-300">
              {isSignUp ? 'Create your account to get started' : 'Sign in to continue saving food'}
            </DialogDescription>
          </div>
        </DialogHeader>



        <div className="space-y-4">
          {/* Google Sign-In Button */}
          <Button
            type="button"
            className="w-full bg-[#4285f4] hover:bg-[#3367d6] text-white py-3 rounded-xl font-medium flex items-center justify-center gap-3 shadow-lg"
            onClick={handleGoogleSignIn}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Connecting to Google...
              </>
            ) : (
              <>
                <svg className="w-5 h-5" viewBox="0 0 24 24">
                  <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path fill="currentColor" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Continue with Google
              </>
            )}
          </Button>

          {/* Divider */}
          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-gray-600"></div>
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="px-2 bg-gradient-to-br from-[#1a1a2e] to-[#16213e] text-gray-400">
                or continue with email
              </span>
            </div>
          </div>

          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              
              <FormField
                control={form.control}
                name="email"
                rules={{ 
                  required: 'Email is required',
                  pattern: {
                    value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: 'Please enter a valid email'
                  }
                }}
                                  render={({ field }) => (
                    <FormItem>
                      <FormControl>
                        <Input 
                          type="email" 
                          placeholder="Email address" 
                          className="bg-white/10 border-gray-600 text-white placeholder:text-gray-400 rounded-xl py-3"
                          {...field} 
                        />
                      </FormControl>
                      <FormMessage className="text-red-400" />
                    </FormItem>
                  )}
              />
              
              <FormField
                control={form.control}
                name="password"
                rules={{ 
                  required: 'Password is required',
                  minLength: {
                    value: 6,
                    message: 'Password must be at least 6 characters'
                  }
                }}
                render={({ field }) => (
                  <FormItem>
                    <FormControl>
                      <div className="relative">
                        <Input 
                          type={showPassword ? 'text' : 'password'} 
                          placeholder="Password" 
                          className="bg-white/10 border-gray-600 text-white placeholder:text-gray-400 rounded-xl py-3 pr-10"
                          {...field} 
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-white"
                        >
                          {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                        </button>
                      </div>
                    </FormControl>
                    <FormMessage className="text-red-400" />
                  </FormItem>
                 )}
               />

              <Button 
                type="submit" 
                disabled={isLoading}
                className="w-full bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white py-3 rounded-xl font-medium shadow-lg border-0"
              >
                {isLoading ? (
                  <div className="flex items-center justify-center">
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    {isSignUp ? 'Creating Account...' : 'Signing In...'}
                  </div>
                ) : (
                  isSignUp ? 'Create Account' : 'Sign In'
                )}
              </Button>
            </form>
          </Form>

          {/* Toggle Sign Up / Sign In */}
          <div className="text-center mt-4">
            <button
              onClick={() => setIsSignUp(!isSignUp)}
              disabled={isLoading}
              className="text-gray-300 hover:text-white transition-colors"
            >
              {isSignUp ? (
                <>
                  Already have an account? <span className="font-medium">Sign in</span>
                </>
              ) : (
                <>
                  Don't have an account? <span className="font-medium">Sign up</span>
                </>
              )}
            </button>
          </div>
        </div>
      </DialogContent>

      {/* Email Signup Continue Dialog */}
      <Dialog open={showEmailSignup} onOpenChange={setShowEmailSignup}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Almost there!</DialogTitle>
            <DialogDescription>
              Would you like to receive updates about new deals and restaurants?
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <Button 
              onClick={() => handleEmailSignupContinue(true)}
              className="w-full bg-green-500 hover:bg-green-600 text-white shadow-lg"
            >
              Yes, keep me updated!
            </Button>
            <Button 
              variant="outline"
              onClick={() => handleEmailSignupContinue(false)}
              className="w-full"
            >
              No thanks, just continue
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* Location Request Dialog */}
      <Dialog open={showLocationRequest} onOpenChange={setShowLocationRequest}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Enable Location Services</DialogTitle>
            <DialogDescription>
              Help us find the best food deals near you!
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4">
            <div className="text-center">
              <MapPin className="w-16 h-16 mx-auto text-brand-green mb-2" />
              <p className="text-sm text-gray-600">
                We'll use your location to show nearby restaurants and calculate accurate pickup times.
              </p>
            </div>
            <Button 
              onClick={() => handleLocationRequest(true)}
              className="w-full bg-green-500 hover:bg-green-600 text-white shadow-lg"
            >
              Allow Location Access
            </Button>
            <Button 
              variant="outline"
              onClick={() => handleLocationRequest(false)}
              className="w-full"
            >
              Maybe Later
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </Dialog>
  );
};

export default Auth;