import React, { useState, useEffect } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useCart } from '@/contexts/CartContext';
import { useFavorites } from '@/contexts/FavoritesContext';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Heart, Clock, MapPin, Star, ShoppingCart } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';

interface ListingsGridProps {
  pickupTimeFilter?: 'now' | 'later';
  showSoldOut?: boolean;
  limit?: number;
  userLocation?: { lat: number; lng: number };
  distanceFilter?: number;
  showNoItemsMessage?: boolean;
  showAllItems?: boolean;
}

export const ListingsGrid: React.FC<ListingsGridProps> = ({
  pickupTimeFilter,
  showSoldOut = true,
  limit,
  userLocation,
  distanceFilter = 10,
  showNoItemsMessage = true,
  showAllItems = false
}) => {
  const { user } = useAuth();
  const { addToCart } = useCart();
  const { favorites, isFavorited, addFavorite, removeFavorite } = useFavorites();
  const { addToCart } = useCart();
  const { favorites, isFavorited, addFavorite, removeFavorite } = useFavorites();
  const [listings, setListings] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch listings from database using location-based search
  useEffect(() => {
    const fetchListings = async () => {
      setLoading(true);
      try {
        // Use the get_listings_with_distance function
        const { data, error } = await supabase.rpc('get_listings_with_distance', {
          user_lat: userLocation?.lat || null,
          user_lon: userLocation?.lng || null,
          max_distance: distanceFilter,
          category_filter: null,
          search_query: null
        });

        if (error) {
          console.error('Error fetching listings:', error);
          setListings([]);
          return;
        }

        if (data) {
          let filteredListings = data;

          // Apply pickup time filter
          if (pickupTimeFilter) {
            const now = new Date();
            const currentHour = now.getHours();
            
            filteredListings = filteredListings.filter((listing: any) => {
              const pickupStart = new Date(listing.pickup_start);
              const pickupStartHour = pickupStart.getHours();
              
              if (pickupTimeFilter === 'now') {
                // Show items available for pickup within the next 2 hours
                return pickupStartHour >= currentHour && pickupStartHour <= currentHour + 2;
              } else {
                // Show items available for pickup later (evening)
                return pickupStartHour >= 17 || pickupStartHour <= 22;
              }
            });
          }

          // Apply sold out filter
          if (!showSoldOut) {
            filteredListings = filteredListings.filter((listing: any) => 
              listing.status !== 'sold-out' && listing.quantity > 0
            );
          }

          // Apply limit
          if (limit) {
            filteredListings = filteredListings.slice(0, limit);
          }

          setListings(filteredListings);
        }
      } catch (error) {
        console.error('Error in fetchListings:', error);
        setListings([]);
      } finally {
        setLoading(false);
      }
    };

    fetchListings();
  }, [userLocation, distanceFilter, pickupTimeFilter, showSoldOut, limit]);


  const handleFavorite = async (listingId: string) => {
    if (!user) {
      toast.error("Please sign in to save favorites");
      return;
    }

    try {
      const favorited = isFavorited(listingId);
      
      if (favorited) {
        await removeFavorite(listingId);
      } else {
        await addFavorite(listingId);
      }
    } catch (error) {
      console.error("Error updating favorite:", error);
      toast.error("Failed to update favorite");
    }
  };

  const handleAddToCart = (listing: any) => {
    addToCart({
      id: listing.id,
      title: listing.item_name,
      vendor: listing.business_name,
      price: listing.price,
      originalPrice: listing.original_price || listing.price,
      pickup: `${listing.pickup_start} - ${listing.pickup_end}`
    });
    toast.success('Added to cart!');
  };

  if (loading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {[...Array(6)].map((_, i) => (
          <Card key={i} className="animate-pulse">
            <CardContent className="p-4">
              <div className="h-48 bg-gray-200 rounded-lg mb-4"></div>
              <div className="space-y-2">
                <div className="h-4 bg-gray-200 rounded w-3/4"></div>
                <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                <div className="h-4 bg-gray-200 rounded w-2/3"></div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (listings.length === 0 && showNoItemsMessage) {
    return (
      <div className="text-center py-8">
                    <div className="text-gray-600 mb-4">
          <ShoppingCart className="w-12 h-12 mx-auto" />
        </div>
        <p className="text-gray-500 mb-2">No items available</p>
                  <p className="text-sm text-gray-600">
          {pickupTimeFilter === 'now' 
            ? 'No items available for pickup now' 
            : 'No items available for pickup later'}
        </p>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {listings.map((listing) => (
        <Card key={listing.id} className="overflow-hidden hover:shadow-lg transition-shadow">
          <CardContent className="p-0">
            {/* Item Image */}
            <div className="relative h-48 bg-gray-100">
              {listing.thumbnail_url ? (
                <img 
                  src={listing.thumbnail_url} 
                  alt={listing.item_name}
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center text-gray-400">
                  <ShoppingCart className="w-12 h-12" />
                </div>
              )}
              
              {/* Favorite Button */}
              <Button
                variant="ghost"
                size="sm"
                className="absolute top-2 right-2 bg-white/80 hover:bg-white"
                onClick={() => handleFavorite(listing.id)}
              >
                <Heart 
                  className={`w-4 h-4 ${favorites.includes(listing.id) ? 'fill-red-500 text-red-500' : 'text-gray-600'}`} 
                />
              </Button>

              {/* Status Badge */}
              {listing.status === 'sold-out' && (
                <Badge className="absolute top-2 left-2 bg-red-500 text-white">
                  Sold Out
                </Badge>
              )}
            </div>

            {/* Item Details */}
            <div className="p-4">
              <div className="flex justify-between items-start mb-2">
                <h3 className="font-semibold text-gray-900 line-clamp-2">
                  {listing.item_name}
                </h3>
                <div className="text-right">
                  <p className="text-sm text-gray-500 line-through">
                    KSh {listing.original_price}
                  </p>
                  <p className="font-bold text-green-600">
                    KSh {listing.price}
                  </p>
                </div>
              </div>

              {/* Business Info */}
              <div className="flex items-center gap-2 mb-2">
                <div className="w-6 h-6 bg-gray-200 rounded-full flex items-center justify-center">
                  {listing.business_thumbnail_url ? (
                    <img 
                      src={listing.business_thumbnail_url} 
                      alt={listing.business_name}
                      className="w-6 h-6 rounded-full object-cover"
                    />
                  ) : (
                    <span className="text-xs text-gray-500">üè™</span>
                  )}
                </div>
                <span className="text-sm text-gray-600">{listing.business_name}</span>
              </div>

              {/* Location and Rating */}
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-1 text-sm text-gray-500">
                  <MapPin className="w-3 h-3" />
                  <span>{listing.location}</span>
                  {listing.distance_km && (
                    <span className="text-xs">({listing.distance_km.toFixed(1)} km)</span>
                  )}
                </div>
                <div className="flex items-center gap-1">
                  <Star className="w-3 h-3 text-yellow-500 fill-current" />
                  <span className="text-sm text-gray-600">
                    {listing.average_rating?.toFixed(1) || 'N/A'}
                  </span>
                </div>
              </div>

              {/* Pickup Time */}
              <div className="flex items-center gap-1 text-sm text-gray-500 mb-3">
                <Clock className="w-3 h-3" />
                <span>
                  {new Date(listing.pickup_start).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - 
                  {new Date(listing.pickup_end).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </span>
              </div>

              {/* Quantity and Add to Cart */}
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-500">
                  {listing.quantity} left
                </span>
                <Button
                  size="sm"
                  className="bg-green-600 hover:bg-green-700 text-white"
                  onClick={() => handleAddToCart(listing)}
                  disabled={listing.status === 'sold-out' || listing.quantity === 0}
                >
                  <ShoppingCart className="w-4 h-4 mr-1" />
                  Add to Cart
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
};

export default ListingsGrid;
